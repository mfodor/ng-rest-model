{"version":3,"file":"HasManyHandler.spec.js","sourceRoot":"","sources":["HasManyHandler.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {HttpClientModule} from '@angular/common/http';\nimport {HttpClientTestingModule} from '@angular/common/http/testing';\nimport {TestBed} from '@angular/core/testing';\nimport {Observable} from 'rxjs';\nimport {Fillable, HasMany, Path} from '../annotations/index';\nimport {FetchMode} from './FetchMode';\nimport {HasManyHandler} from './HasManyHandler';\nimport {RestModel} from './rest-model';\n\ndescribe('HasManyHandler', () => {\n\n    beforeEach(() => {\n        TestBed.configureTestingModule({\n            imports: [\n                HttpClientModule,\n                HttpClientTestingModule\n            ],\n        });\n    });\n\n    describe('async: false, fetch: EAGER', () => {\n        @Path('others')\n        class OtherModel extends RestModel<OtherModel> {\n            id: number;\n            @Fillable() property: string;\n        }\n\n        @Path('models')\n        @HasMany({\n            field: 'others',\n            type: OtherModel,\n            fetch: FetchMode.EAGER,\n            async: false\n        })\n        class Model extends RestModel<Model> {\n            id: number;\n            @Fillable() property: string;\n            others: OtherModel[];\n        }\n\n        let model: Model;\n        let handler: HasManyHandler<OtherModel>;\n\n        beforeEach(() => {\n            model = new Model();\n            handler = model.$hasMany.others;\n        });\n\n        describe('list getter', () => {\n            it('should return synchronously', () => {\n                const others = [new OtherModel().fill({id: 1, property: 'prop'})];\n                model.others = others;\n                expect(handler.list instanceof Observable).toBe(false);\n                expect(Array.isArray(handler.list)).toBe(true);\n                expect((<OtherModel[]>handler.list).length).toBe(1);\n                expect(handler.list[0].equals(others[0])).toBe(true);\n            });\n        });\n\n    });\n\n    describe('getAll', () => {\n        it('should aaaa', () => {\n            expect(true).toBe(true);\n        });\n    });\n\n    describe('getPage', () => {\n        it('should aaaa', () => {\n            expect(true).toBe(true);\n        });\n    });\n\n    describe('setList', () => {\n        it('should aaaa', () => {\n            expect(true).toBe(true);\n        });\n    });\n\n    describe('find', () => {\n        it('should aaaa', () => {\n            expect(true).toBe(true);\n        });\n    });\n\n    describe('find$', () => {\n        it('should aaaa', () => {\n            expect(true).toBe(true);\n        });\n    });\n\n    describe('save', () => {\n        it('should aaaa', () => {\n            expect(true).toBe(true);\n        });\n    });\n\n    describe('create', () => {\n        it('should aaaa', () => {\n            expect(true).toBe(true);\n        });\n    });\n\n    describe('remove', () => {\n        it('should aaaa', () => {\n            expect(true).toBe(true);\n        });\n    });\n\n    describe('push', () => {\n        it('should aaaa', () => {\n            expect(true).toBe(true);\n        });\n    });\n\n    describe('pull', () => {\n        it('should aaaa', () => {\n            expect(true).toBe(true);\n        });\n    });\n\n    describe('set', () => {\n        it('should aaaa', () => {\n            expect(true).toBe(true);\n        });\n    });\n});\n"]}