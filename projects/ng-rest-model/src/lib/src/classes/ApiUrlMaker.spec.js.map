{"version":3,"file":"ApiUrlMaker.spec.js","sourceRoot":"","sources":["ApiUrlMaker.spec.ts"],"names":[],"mappings":";;AAAA,6CAA0C;AAE1C,QAAQ,CAAC,aAAa,EAAE;IACpB,IAAI,KAAkB,CAAC;IACvB,IAAM,OAAO,GAAG,eAAe,CAAC;IAEhC,UAAU,CAAC;QACP,KAAK,GAAG,IAAI,yBAAW,CAAC,OAAO,CAAC,CAAC;IACrC,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,aAAa,EAAE;QACpB,EAAE,CAAC,6CAA6C,EAAE;YAC9C,MAAM,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;QAChD,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,KAAK,EAAE;QACZ,EAAE,CAAC,iCAAiC,EAAE;YAClC,KAAK,CAAC,GAAG,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;YACxB,MAAM,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC,CAAC,IAAI,CAAC,uBAAuB,CAAC,CAAC;QACxD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,iCAAiC,EAAE;YAClC,KAAK,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;YACnB,MAAM,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;QACrD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,0FAA0F,EAAE;YAC3F,MAAM,CAAC,cAAM,OAAA,KAAK,CAAC,GAAG,CAAM,EAAE,EAAE,CAAC,CAAC,EAArB,CAAqB,CAAC,CAAC,YAAY,CAAC,0BAA0B,CAAC,CAAC;YAC7E,MAAM,CAAC,cAAM,OAAA,KAAK,CAAC,GAAG,CAAM,EAAE,EAAE,CAAC,CAAC,EAArB,CAAqB,CAAC,CAAC,YAAY,CAAC,0BAA0B,CAAC,CAAC;YAC7E,MAAM,CAAC,cAAM,OAAA,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,EAApB,CAAoB,CAAC,CAAC,YAAY,CAAC,0BAA0B,CAAC,CAAC;YAC5E,MAAM,CAAC,cAAM,OAAA,KAAK,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC,EAAlB,CAAkB,CAAC,CAAC,YAAY,CAAC,0BAA0B,CAAC,CAAC;YAC1E,MAAM,CAAC,cAAM,OAAA,KAAK,CAAC,GAAG,CAAM,CAAC;YAC7B,CAAC,CAAC,EAAE,CAAC,CAAC,EADO,CACP,CAAC,CAAC,YAAY,CAAC,0BAA0B,CAAC,CAAC;YACjD,MAAM,CAAC,cAAM,OAAA,KAAK,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,CAAC,EAAhB,CAAgB,CAAC,CAAC,YAAY,CAAC,0BAA0B,CAAC,CAAC;YACxE,MAAM,CAAC,cAAM,OAAA,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,EAAjB,CAAiB,CAAC,CAAC,YAAY,CAAC,0BAA0B,CAAC,CAAC;YAEzE,MAAM,CAAC,cAAM,OAAA,KAAK,CAAC,GAAG,CAAC,IAAI,EAAO,EAAE,CAAC,EAAxB,CAAwB,CAAC,CAAC,YAAY,CAAC,0BAA0B,CAAC,CAAC;YAChF,MAAM,CAAC,cAAM,OAAA,KAAK,CAAC,GAAG,CAAC,IAAI,EAAO,EAAE,CAAC,EAAxB,CAAwB,CAAC,CAAC,YAAY,CAAC,0BAA0B,CAAC,CAAC;YAChF,MAAM,CAAC,cAAM,OAAA,KAAK,CAAC,GAAG,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,EAAvB,CAAuB,CAAC,CAAC,YAAY,CAAC,0BAA0B,CAAC,CAAC;YAC/E,MAAM,CAAC,cAAM,OAAA,KAAK,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC,EAArB,CAAqB,CAAC,CAAC,YAAY,CAAC,0BAA0B,CAAC,CAAC;YAC7E,MAAM,CAAC,cAAM,OAAA,KAAK,CAAC,GAAG,CAAC,IAAI,EAAO,CAAC;YACnC,CAAC,CAAC,CAAC,EADU,CACV,CAAC,CAAC,YAAY,CAAC,0BAA0B,CAAC,CAAC;YAC9C,MAAM,CAAC,cAAM,OAAA,KAAK,CAAC,GAAG,CAAC,IAAI,EAAE,EAAE,CAAC,EAAnB,CAAmB,CAAC,CAAC,YAAY,CAAC,0BAA0B,CAAC,CAAC;YAC3E,MAAM,CAAC,cAAM,OAAA,KAAK,CAAC,GAAG,CAAC,IAAI,EAAE,GAAG,CAAC,EAApB,CAAoB,CAAC,CAAC,YAAY,CAAC,0BAA0B,CAAC,CAAC;QAChF,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,KAAK,EAAE;QACZ,EAAE,CAAC,iCAAiC,EAAE;YAClC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;YAChB,MAAM,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;QACnD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,iCAAiC,EAAE;YAClC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;YACb,MAAM,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;QAClD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,0FAA0F,EAAE;YAC3F,MAAM,CAAC,cAAM,OAAA,KAAK,CAAC,GAAG,CAAM,EAAE,CAAC,EAAlB,CAAkB,CAAC,CAAC,YAAY,CAAC,0BAA0B,CAAC,CAAC;YAC1E,MAAM,CAAC,cAAM,OAAA,KAAK,CAAC,GAAG,CAAM,EAAE,CAAC,EAAlB,CAAkB,CAAC,CAAC,YAAY,CAAC,0BAA0B,CAAC,CAAC;YAC1E,MAAM,CAAC,cAAM,OAAA,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAjB,CAAiB,CAAC,CAAC,YAAY,CAAC,0BAA0B,CAAC,CAAC;YACzE,MAAM,CAAC,cAAM,OAAA,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,EAAf,CAAe,CAAC,CAAC,YAAY,CAAC,0BAA0B,CAAC,CAAC;YACvE,MAAM,CAAC,cAAM,OAAA,KAAK,CAAC,GAAG,CAAM,CAAC;YAC7B,CAAC,CAAC,CAAC,EADU,CACV,CAAC,CAAC,YAAY,CAAC,0BAA0B,CAAC,CAAC;YAC9C,MAAM,CAAC,cAAM,OAAA,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,EAAb,CAAa,CAAC,CAAC,YAAY,CAAC,0BAA0B,CAAC,CAAC;YACrE,MAAM,CAAC,cAAM,OAAA,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,EAAd,CAAc,CAAC,CAAC,YAAY,CAAC,0BAA0B,CAAC,CAAC;QAC1E,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,QAAQ,EAAE;QACf,EAAE,CAAC,uDAAuD,EAAE;YACxD,KAAK,CAAC,GAAG,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;YACxB,KAAK,CAAC,MAAM,CAAC,EAAC,IAAI,EAAE,EAAE,EAAE,IAAI,EAAE,CAAC,EAAC,CAAC,CAAC;YAClC,MAAM,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC,CAAC,IAAI,CAAC,sCAAsC,CAAC,CAAC;QACvE,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,OAAO,EAAE;QACd,EAAE,CAAC,uDAAuD,EAAE;YACxD,KAAK,CAAC,GAAG,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;YACxB,KAAK,CAAC,KAAK,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;YACxB,KAAK,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YACvB,MAAM,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC,CAAC,IAAI,CAAC,sCAAsC,CAAC,CAAC;QACvE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,yEAAyE,EAAE;YAC1E,KAAK,CAAC,GAAG,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;YACxB,KAAK,CAAC,KAAK,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;YACxB,KAAK,CAAC,KAAK,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;YACnB,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YAClB,KAAK,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;YACrB,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC;YACvB,KAAK,CAAC,KAAK,CAAM,EAAE,EAAE,CAAC,CAAC,CAAC;YACxB,KAAK,CAAC,KAAK,CAAM,EAAE,EAAE,CAAC,CAAC,CAAC;YACxB,MAAM,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC,CAAC,IAAI,CAAC,+BAA+B,CAAC,CAAC;QAChE,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,OAAO,EAAE;QACd,EAAE,CAAC,2CAA2C,EAAE;YAC5C,KAAK,CAAC,GAAG,CAAC,OAAO,EAAE,aAAa,CAAC,CAAC;YAClC,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;YACnB,KAAK,CAAC,KAAK,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;YACrB,KAAK,CAAC,MAAM,CAAC,EAAC,IAAI,EAAE,EAAE,EAAE,IAAI,EAAE,CAAC,EAAC,CAAC,CAAC;YAClC,MAAM,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC,CAAC,IAAI,CAAC,yDAAyD,CAAC,CAAC;QAC1F,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,UAAU,EAAE;QACjB,EAAE,CAAC,wCAAwC,EAAE;YACzC,MAAM,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC,CAAC;QACjD,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC","sourcesContent":["import {ApiUrlMaker} from './ApiUrlMaker';\n\ndescribe('ApiUrlMaker', () => {\n    let maker: ApiUrlMaker;\n    const baseUrl = 'host:8000/api';\n\n    beforeEach(() => {\n        maker = new ApiUrlMaker(baseUrl);\n    });\n\n    describe('constructor', () => {\n        it('should be initialized with backend base url', () => {\n            expect(maker.build()).toBe('host:8000/api');\n        });\n    });\n\n    describe('one', () => {\n        it('should accept string parameters', () => {\n            maker.one('my', 'path');\n            expect(maker.build()).toBe('host:8000/api/my/path');\n        });\n\n        it('should accept number parameters', () => {\n            maker.one('my', 5);\n            expect(maker.build()).toBe('host:8000/api/my/5');\n        });\n\n        it('should throw error if param is not string or number (or is empty string or not a number)', () => {\n            expect(() => maker.one(<any>{}, 1)).toThrowError('InvalidArgumentException');\n            expect(() => maker.one(<any>[], 1)).toThrowError('InvalidArgumentException');\n            expect(() => maker.one(void 0, 1)).toThrowError('InvalidArgumentException');\n            expect(() => maker.one(null, 1)).toThrowError('InvalidArgumentException');\n            expect(() => maker.one(<any>(() => {\n            }), 1)).toThrowError('InvalidArgumentException');\n            expect(() => maker.one('', 1)).toThrowError('InvalidArgumentException');\n            expect(() => maker.one(NaN, 1)).toThrowError('InvalidArgumentException');\n\n            expect(() => maker.one('my', <any>{})).toThrowError('InvalidArgumentException');\n            expect(() => maker.one('my', <any>[])).toThrowError('InvalidArgumentException');\n            expect(() => maker.one('my', void 0)).toThrowError('InvalidArgumentException');\n            expect(() => maker.one('my', null)).toThrowError('InvalidArgumentException');\n            expect(() => maker.one('my', <any>(() => {\n            }))).toThrowError('InvalidArgumentException');\n            expect(() => maker.one('my', '')).toThrowError('InvalidArgumentException');\n            expect(() => maker.one('my', NaN)).toThrowError('InvalidArgumentException');\n        });\n    });\n\n    describe('all', () => {\n        it('should accept string parameters', () => {\n            maker.all('my');\n            expect(maker.build()).toBe('host:8000/api/my');\n        });\n\n        it('should accept number parameters', () => {\n            maker.all(7);\n            expect(maker.build()).toBe('host:8000/api/7');\n        });\n\n        it('should throw error if param is not string or number (or is empty string or not a number)', () => {\n            expect(() => maker.all(<any>{})).toThrowError('InvalidArgumentException');\n            expect(() => maker.all(<any>[])).toThrowError('InvalidArgumentException');\n            expect(() => maker.all(void 0)).toThrowError('InvalidArgumentException');\n            expect(() => maker.all(null)).toThrowError('InvalidArgumentException');\n            expect(() => maker.all(<any>(() => {\n            }))).toThrowError('InvalidArgumentException');\n            expect(() => maker.all('')).toThrowError('InvalidArgumentException');\n            expect(() => maker.all(NaN)).toThrowError('InvalidArgumentException');\n        });\n    });\n\n    describe('params', () => {\n        it('should accept parameters and be joined after the path', () => {\n            maker.one('my', 'path');\n            maker.params({rows: 20, page: 3});\n            expect(maker.build()).toBe('host:8000/api/my/path?rows=20&page=3');\n        });\n    });\n\n    describe('param', () => {\n        it('should accept parameters and be joined after the path', () => {\n            maker.one('my', 'path');\n            maker.param('rows', 20);\n            maker.param('page', 3);\n            expect(maker.build()).toBe('host:8000/api/my/path?rows=20&page=3');\n        });\n\n        it('should skip with no error if there is no key or is not string or number', () => {\n            maker.one('my', 'path');\n            maker.param('rows', 20);\n            maker.param('', 3);\n            maker.param(0, 3);\n            maker.param(null, 3);\n            maker.param(void 0, 3);\n            maker.param(<any>[], 3);\n            maker.param(<any>{}, 3);\n            expect(maker.build()).toBe('host:8000/api/my/path?rows=20');\n        });\n    });\n\n    describe('build', () => {\n        it('should join parts with / and append query', () => {\n            maker.one('users', '20934820394');\n            maker.all('roles');\n            maker.param('q', '');\n            maker.params({rows: 20, page: 3});\n            expect(maker.build()).toBe('host:8000/api/users/20934820394/roles?q=&rows=20&page=3');\n        });\n    });\n\n    describe('toString', () => {\n        it('should return with the result of build', () => {\n            expect(maker.toString()).toBe(maker.build());\n        });\n    });\n});\n"]}