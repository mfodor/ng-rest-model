{"version":3,"file":"BelongsTo.js","sourceRoot":"","sources":["BelongsTo.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,0CAAkE;AAClE,0CAAsD;AAUtD,mBACI,KAA+B,EAC/B,IAA+B,EAC/B,KAAkB,EAClB,KAAc,EACd,KAAe;IAEf,IAAI,MAAuB,CAAC;IAC5B,EAAE,CAAC,CAAC,OAAO,KAAK,KAAK,QAAQ,CAAC,CAAC,CAAC;QAC5B,MAAM,GAAG;YACL,IAAI,EAAE,KAAK,CAAC,IAAI;YAChB,KAAK,EAAE,KAAK,CAAC,KAAK,IAAI,KAAK,CAAC,KAAK;YACjC,KAAK,EAAE,KAAK,CAAC,KAAK,IAAI,iBAAS,CAAC,IAAI;YACpC,KAAK,EAAE,CAAC,CAAC,KAAK,CAAC,KAAK;YACpB,KAAK,EAAE,KAAK,CAAC,KAAK;SACrB,CAAC;IACN,CAAC;IAAC,IAAI,CAAC,CAAC;QACJ,MAAM,GAAG;YACL,KAAK,EAAE,KAAK,IAAI,KAAK;YACrB,KAAK,EAAE,KAAK,IAAI,iBAAS,CAAC,IAAI;YAC9B,KAAK,EAAE,CAAC,CAAC,KAAK;YACd,IAAI,EAAE,IAAI;YACV,KAAK,EAAE,KAAK;SACf,CAAC;IACN,CAAC;IACD,MAAM,CAAC,KAAK,GAAG,MAAM,CAAC,KAAK,KAAK,iBAAS,CAAC,IAAI,IAAI,MAAM,CAAC,KAAK,CAAC;IAE/D,IAAM,gBAAgB,GAAG,MAAI,KAAO,CAAC;IAErC,MAAM,CAAC,UAA+C,MAAS,EAAE,WAAmB;QAChF,EAAE,CAAC,CAAC,OAAO,MAAM,KAAK,UAAU,CAAC,CAAC,CAAC;YAC/B,MAAM,IAAI,KAAK,CACX,6EAA6E;iBAC7E,aAAW,oBAAY,CAAC,MAAM,CAAC,oBAAe,WAAa,CAAA,CAC9D,CAAC;QACN,CAAC;QAED,EAAE,CAAC,CAAC,CAAC,iBAAS,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YACnC,MAAM,IAAI,KAAK,CACX,0EAA0E;iBAC1E,UAAQ,oBAAY,CAAC,MAAM,CAAC,0BAAuB,CAAA,CACtD,CAAC;QACN,CAAC;QAED,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;YACf,MAAM,IAAI,KAAK,CACX,0CAA0C;iBAC1C,aAAW,oBAAY,CAAC,MAAM,CAAC,iBAAY,MAAM,CAAC,KAAO,CAAA,CAC5D,CAAC;QACN,CAAC;QAED,MAAM;YAAe,2BAAM;YAApB;;YAYP,CAAC;YAXG,sBAAI,mBAAS,KAAM;qBAAnB;oBACI,EAAE,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,IAAI,KAAK,KAAK,iBAAS,CAAC,KAAK,CAAC,CAAC,CAAC;wBACtD,MAAM,CAAC,cAAM,CAAC,KAAK,EAAE,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC;oBACjD,CAAC;oBAED,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,GAAS,IAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;gBAChE,CAAC;;;eAAA;YAED,sBAAI,mBAAS,KAAM;qBAAnB,UAAoB,OAAY;oBAC5B,IAAI,CAAC,gBAAgB,CAAC,GAAG,IAAI,IAAI,OAAO,IAAI,IAAU,IAAK,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,OAAO,CAAC;gBAC3F,CAAC;;;eAAA;YACL,cAAC;QAAD,CAAC,AAZM,CAAc,MAAM,GAYzB;IACN,CAAC,CAAC;AACN,CAAC;AAjED,8BAiEC","sourcesContent":["import {FetchMode, RestModel, TFetchMode} from '../classes/index';\nimport {getClassName, getter} from '../helpers/index';\n\nexport interface BelongsToConfig<T = any> {\n    field: string;\n    route?: string;\n    type: {new(...args: any[]): T};\n    fetch?: TFetchMode;\n    async?: boolean;\n}\n\nexport function BelongsTo<T = any>(\n    field: string | BelongsToConfig,\n    type?: {new(...args: any[]): T},\n    fetch?: TFetchMode,\n    route?: string,\n    async?: boolean\n): any {\n    let config: BelongsToConfig;\n    if (typeof field === 'object') {\n        config = {\n            type: field.type,\n            route: field.route || field.field,\n            fetch: field.fetch || FetchMode.LAZY,\n            async: !!field.async,\n            field: field.field\n        };\n    } else {\n        config = {\n            route: route || field,\n            fetch: fetch || FetchMode.LAZY,\n            async: !!async,\n            type: type,\n            field: field\n        };\n    }\n    config.async = config.fetch === FetchMode.LAZY || config.async;\n\n    const privateFieldName = `_${field}`;\n\n    return function <T extends {new(...args: any[]): {}}>(target: T, propertyKey: string) {\n        if (typeof target !== 'function') {\n            throw new Error(\n                'BelongsTo decorator should be applied on the class and not on the property!' +\n                ` Class: ${getClassName(target)}, property: ${propertyKey}`\n            );\n        }\n\n        if (!RestModel.isPrototypeOf(target)) {\n            throw new Error(\n                'BelongsTo decorator should be applied on a class that extends RestModel!' +\n                ` But ${getClassName(target)} is not extending it.`\n            );\n        }\n\n        if (!config.type) {\n            throw new Error(\n                `BelongsTo: The type should be specified!` +\n                ` Class: ${getClassName(target)}, field: ${config.field}`\n            );\n        }\n\n        return class extends target {\n            get [<string>field]() {\n                if (this[privateFieldName] || fetch === FetchMode.EAGER) {\n                    return getter(async, this[privateFieldName]);\n                }\n\n                return this[privateFieldName] = (<any>this).lazyLoad(route);\n            }\n\n            set [<string>field](related: any) {\n                this[privateFieldName] = type && related && new (<any>type)().init(related) || related;\n            }\n        };\n    };\n}\n"]}