{"version":3,"file":"get-class-name.spec.js","sourceRoot":"","sources":["get-class-name.spec.ts"],"names":[],"mappings":";;AAAA,mDAA8C;AAE9C,QAAQ,CAAC,cAAc,EAAE;IAErB,EAAE,CAAC,iEAAiE,EAAE;QAClE,MAAM,CAAC,6BAAY,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAC/C,MAAM,CAAC,6BAAY,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAC7C,MAAM,CAAC,6BAAY,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAC9C,MAAM,CAAC,6BAAY,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAC7C,MAAM,CAAC,6BAAY,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAC3C,MAAM,CAAC,6BAAY,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAC/C,MAAM,CAAC,6BAAY,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAC1C,MAAM,CAAC,6BAAY,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IACjD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,gDAAgD,EAAE;QACjD,MAAM,CAAC,6BAAY,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QACxC,MAAM,CAAC,6BAAY,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAEvC;YAAA;YAAe,CAAC;YAAD,cAAC;QAAD,CAAC,AAAhB,IAAgB;QAChB,IAAM,OAAO,GAAG,IAAI,OAAO,EAAE,CAAC;QAC9B,IAAM,oBAAoB,GAAQ,CAAC,UAAU,MAAM;YAC/C,MAAM,CAAC,cAAc,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;YACzC,gBAAgB,IAAI,CAAC,WAAW,GAAG,SAAS,CAAC,CAAC,CAAC;YAC/C,SAAS,CAAC,SAAS,GAAG,CAAC,EAAE,CAAC,SAAS,GAAG,MAAM,CAAC,SAAS,EAAE,IAAU,EAAG,EAAE,CAAC,CAAC;YACzE,SAAS,CAAC,SAAS,GAAG,MAAM,CAAC;YAC7B;gBACI,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC;YACrC,CAAC;YACD,MAAM,CAAC,SAAS,CAAC;QACrB,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;QACZ,IAAM,SAAS,GAAG,IAAI,oBAAoB,EAAE,CAAC;QAE7C,MAAM,CAAC,6BAAY,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QAC9C,MAAM,CAAC,6BAAY,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IACpD,CAAC,CAAC,CAAC;AAEP,CAAC,CAAC,CAAC","sourcesContent":["import {getClassName} from './get-class-name';\n\ndescribe('getClassName', () => {\n\n    it('should return unknown message if target is not class (function)', () => {\n        expect(getClassName(void 0)).toBe('[Unknown]');\n        expect(getClassName(null)).toBe('[Unknown]');\n        expect(getClassName(false)).toBe('[Unknown]');\n        expect(getClassName(true)).toBe('[Unknown]');\n        expect(getClassName('')).toBe('[Unknown]');\n        expect(getClassName('text')).toBe('[Unknown]');\n        expect(getClassName(0)).toBe('[Unknown]');\n        expect(getClassName(2034)).toBe('[Unknown]');\n    });\n\n    it('should return the name of the class (function)', () => {\n        expect(getClassName({})).toBe('Object');\n        expect(getClassName([])).toBe('Array');\n\n        class MyClass {}\n        const myClass = new MyClass();\n        const InheritedWithoutName: any = (function (_super) {\n            Object.setPrototypeOf(Inherited, _super);\n            function __() { this.constructor = Inherited; }\n            Inherited.prototype = (__.prototype = _super.prototype, new (<any>__)());\n            Inherited.prototype = _super;\n            function Inherited() {\n                return _super.call(this) || this;\n            }\n            return Inherited;\n        }(MyClass));\n        const inherited = new InheritedWithoutName();\n\n        expect(getClassName(myClass)).toBe('MyClass');\n        expect(getClassName(inherited)).toBe('MyClass');\n    });\n\n});\n"]}